/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.infinitservices.serviceplatform.bulkuploader;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import org.apache.http.HttpHost;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.elasticsearch.action.bulk.BulkItemResponse;
import org.elasticsearch.action.bulk.BulkProcessor;
import org.elasticsearch.action.bulk.BulkRequest;
import org.elasticsearch.action.bulk.BulkResponse;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.client.Response;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.common.xcontent.XContentType;

public class ElasticsearchBulkUploaderApp {

    private final String host = "localhost";
    private final int port = 9200;
    private final String scheme = "http";
    private final String user = "test";
    private final String password = "test";

    private final BulkProcessor.Listener listener = new BulkProcessor.Listener() {
        int count = 0;

        @Override
        public void beforeBulk(long executionId, BulkRequest request) {
            count = count + request.numberOfActions();
            System.out.println("Uploaded " + count + " so far");
        }

        @Override
        public void afterBulk(long executionId, BulkRequest request, BulkResponse response) {
            if (response.hasFailures()) {
                for (BulkItemResponse bulkItemResponse : response) {
                    if (bulkItemResponse.isFailed()) {
                        BulkItemResponse.Failure failure = bulkItemResponse.getFailure();
                        System.out.println("Error " + failure.toString());
                    }
                }
            }
        }

        @Override
        public void afterBulk(long executionId, BulkRequest request, Throwable failure) {
            System.out.println("Big errors " + failure.toString());
        }
    };

    public int lowLevelApi(final String indexName) throws IOException {
        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, password));
        try (RestHighLevelClient client = new RestHighLevelClient(
                RestClient.builder(new HttpHost(host, port, scheme)).setHttpClientConfigCallback(
                        httpClientBuilder -> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider)))) {
            Response response = client.getLowLevelClient().performRequest("HEAD", "/" + indexName);
            int statusCode = response.getStatusLine().getStatusCode();
            return statusCode;
        }
    }

    public void highLevelApi(final String indexName) throws InterruptedException, IOException {
        final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
        credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(user, password));
        try (RestHighLevelClient client = new RestHighLevelClient(
                RestClient.builder(new HttpHost(host, port, scheme)).setHttpClientConfigCallback(
                        httpClientBuilder -> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider)))) {
            BulkProcessor bulkProcessor = BulkProcessor.builder(client::bulkAsync, listener).build();

            String line;
            BufferedReader br = new BufferedReader(new FileReader("enron.json"));
            while ((line = br.readLine()) != null) {
                bulkProcessor.add(new IndexRequest(indexName, "mail").source(line, XContentType.JSON));
            }

            boolean terminated = bulkProcessor.awaitClose(30L, TimeUnit.SECONDS);
            if (!terminated) {
                System.out.println("Some requests have not been processed");
            }
        }
    }

    public static void main(String[] args) throws IOException {
    }
}
